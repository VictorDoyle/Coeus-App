// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// ====== MODELS ====== //
// Generating the User Model

model User {
  id      Int     @default(autoincrement()) @id
  firstname String
  lastname String
  username String @unique
  bio String
  email   String  @unique
  password String 
  profile Profile?

  //all posts user has made - One To Many
  posts Post[]
}

model Profile {
  id     Int     @default(autoincrement()) @id
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

// Generating the Post Model

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  description String?
  //published attribute will allow saving posts and posting later
  published Boolean @default(false) 
  // keep category for post mvp stage
  category String? 

  // Model Relationship (One To Many // User To Post)
  // store userId inside table for prisma to relate to post
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  // One To Many // Post To Comments
  comments Comment[]
  // One To Many // Post To Likes
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value Int @default(1)
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([authorId, postId])
}


// TODO: Comments (Many to Many)
// Friends/Followers (Many followers to One User) || (One User follow to One User)
// Posts has many comments to One post -- 
// Posts has many likes to One Post


